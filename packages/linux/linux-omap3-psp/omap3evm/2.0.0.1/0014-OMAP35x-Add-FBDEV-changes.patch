From 7a52f596835c08a54c67c41270516f129b776925 Mon Sep 17 00:00:00 2001
From: Sriram <srk@ti.com>
Date: Wed, 10 Sep 2008 20:42:23 +0530
Subject: [PATCH 14/24] OMAP35x : Add FBDEV changes.

Under this driver, changed Frame buffer driver to use
Dss Library (minimul use) so that both V4L2 and FBDEV can
work together.
---
 arch/arm/configs/omap3_evm_defconfig |   35 ++---
 arch/arm/plat-omap/Makefile          |    6 +-
 arch/arm/plat-omap/omap-dss.c        |    2 -
 drivers/video/omap/dispc.c           |  342 +++++++++-------------------------
 4 files changed, 101 insertions(+), 284 deletions(-)

diff --git a/arch/arm/configs/omap3_evm_defconfig b/arch/arm/configs/omap3_evm_defconfig
index d630b31..20dc574 100644
--- a/arch/arm/configs/omap3_evm_defconfig
+++ b/arch/arm/configs/omap3_evm_defconfig
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: 2.6.26-omap1
-# Mon Sep  8 14:08:41 2008
+# Tue Aug 26 12:01:51 2008
 #
 CONFIG_ARM=y
 CONFIG_SYS_SUPPORTS_APM_EMULATION=y
@@ -173,12 +173,12 @@ CONFIG_ARCH_OMAP3=y
 # CONFIG_OMAP_DEBUG_POWERDOMAIN is not set
 # CONFIG_OMAP_DEBUG_CLOCKDOMAIN is not set
 # CONFIG_OMAP_SMARTREFLEX is not set
-CONFIG_OMAP_RESET_CLOCKS=y
+# CONFIG_OMAP_RESET_CLOCKS is not set
 CONFIG_OMAP_BOOT_TAG=y
 CONFIG_OMAP_BOOT_REASON=y
 # CONFIG_OMAP_COMPONENT_VERSION is not set
 # CONFIG_OMAP_GPIO_SWITCH is not set
-CONFIG_OMAP_MUX=y
+# CONFIG_OMAP_MUX is not set
 CONFIG_OMAP_MCBSP=y
 # CONFIG_OMAP_MMU_FWK is not set
 # CONFIG_OMAP_MBOX_FWK is not set
@@ -194,7 +194,7 @@ CONFIG_OMAP_PM_NOOP=y
 CONFIG_ARCH_OMAP34XX=y
 CONFIG_ARCH_OMAP3430=y
 CONFIG_ARCH_OMAP35XX=y
-CONFIG_ARCH_OMAP3503=y
++CONFIG_ARCH_OMAP3503=y
 # CONFIG_ARCH_OMAP3515 is not set
 # CONFIG_ARCH_OMAP3525 is not set
 # CONFIG_ARCH_OMAP3530 is not set
@@ -205,7 +205,6 @@ CONFIG_ARCH_OMAP3503=y
 # CONFIG_MACH_OMAP_LDP is not set
 # CONFIG_MACH_OMAP_3430SDP is not set
 CONFIG_MACH_OMAP3EVM=y
-# CONFIG_MACH_OMAP3EVM_DC is not set
 # CONFIG_MACH_OMAP3_BEAGLE is not set
 CONFIG_OMAP_TICK_GPTIMER=1
 
@@ -435,18 +434,15 @@ CONFIG_FW_LOADER=y
 # CONFIG_CONNECTOR is not set
 CONFIG_MTD=y
 # CONFIG_MTD_DEBUG is not set
-CONFIG_MTD_CONCAT=y
-CONFIG_MTD_PARTITIONS=y
-# CONFIG_MTD_REDBOOT_PARTS is not set
-CONFIG_MTD_CMDLINE_PARTS=y
-# CONFIG_MTD_AFS_PARTS is not set
+# CONFIG_MTD_CONCAT is not set
+# CONFIG_MTD_PARTITIONS is not set
 
 #
 # User Modules And Translation Layers
 #
-CONFIG_MTD_CHAR=y
-CONFIG_MTD_BLKDEVS=y
-CONFIG_MTD_BLOCK=y
+# CONFIG_MTD_CHAR is not set
+# CONFIG_MTD_BLKDEVS is not set
+# CONFIG_MTD_BLOCK is not set
 # CONFIG_MTD_BLOCK_RO is not set
 # CONFIG_FTL is not set
 # CONFIG_NFTL is not set
@@ -639,7 +635,7 @@ CONFIG_INPUT_KEYBOARD=y
 # CONFIG_KEYBOARD_XTKBD is not set
 # CONFIG_KEYBOARD_NEWTON is not set
 # CONFIG_KEYBOARD_STOWAWAY is not set
-CONFIG_KEYBOARD_TWL4030=y
+CONFIG_KEYBOARD_TWL4030=m
 # CONFIG_KEYBOARD_LM8323 is not set
 # CONFIG_KEYBOARD_GPIO is not set
 # CONFIG_INPUT_MOUSE is not set
@@ -841,9 +837,6 @@ CONFIG_VIDEO_HELPER_CHIPS_AUTO=y
 # CONFIG_VIDEO_SAA5246A is not set
 # CONFIG_VIDEO_SAA5249 is not set
 # CONFIG_TUNER_3036 is not set
-# CONFIG_VIDEO_OMAP3 is not set
-# CONFIG_VIDEO_OMAP34XX_ISP_PREVIEWER is not set
-# CONFIG_VIDEO_OMAP34XX_ISP_RESIZER is not set
 CONFIG_V4L_USB_DRIVERS=y
 CONFIG_USB_VIDEO_CLASS=y
 # CONFIG_VIDEO_PVRUSB2 is not set
@@ -915,9 +908,6 @@ CONFIG_FB_OMAP_CONSISTENT_DMA_SIZE=2
 CONFIG_DUMMY_CONSOLE=y
 # CONFIG_FRAMEBUFFER_CONSOLE is not set
 CONFIG_LOGO=y
-CONFIG_LOGO_LINUX_MONO=y
-CONFIG_LOGO_LINUX_VGA16=y
-CONFIG_LOGO_LINUX_CLUT224=y
 
 #
 # Sound
@@ -932,7 +922,7 @@ CONFIG_SND_TIMER=y
 CONFIG_SND_PCM=y
 CONFIG_SND_HWDEP=y
 CONFIG_SND_RAWMIDI=y
-# CONFIG_SND_SEQUENCER is not set
++# CONFIG_SND_SEQUENCER is not set
 CONFIG_SND_OSSEMUL=y
 CONFIG_SND_MIXER_OSS=y
 CONFIG_SND_PCM_OSS=y
@@ -1174,7 +1164,6 @@ CONFIG_SYSFS=y
 CONFIG_TMPFS=y
 # CONFIG_TMPFS_POSIX_ACL is not set
 # CONFIG_HUGETLB_PAGE is not set
-CONFIG_RAMFS=y
 # CONFIG_CONFIGFS_FS is not set
 
 #
@@ -1193,7 +1182,7 @@ CONFIG_JFFS2_FS_WRITEBUFFER=y
 # CONFIG_JFFS2_FS_WBUF_VERIFY is not set
 # CONFIG_JFFS2_SUMMARY is not set
 # CONFIG_JFFS2_FS_XATTR is not set
-CONFIG_JFFS2_COMPRESSION_OPTIONS=y
+# CONFIG_JFFS2_COMPRESSION_OPTIONS is not set
 CONFIG_JFFS2_ZLIB=y
 # CONFIG_JFFS2_LZO is not set
 CONFIG_JFFS2_RTIME=y
diff --git a/arch/arm/plat-omap/Makefile b/arch/arm/plat-omap/Makefile
index 0ef4c85..30db339 100644
--- a/arch/arm/plat-omap/Makefile
+++ b/arch/arm/plat-omap/Makefile
@@ -13,8 +13,8 @@ obj-  :=
 obj-$(CONFIG_ARCH_OMAP16XX) += ocpi.o
 
 obj-$(CONFIG_OMAP_MCBSP) += mcbsp.o
-obj-$(CONFIG_ARCH_OMAP3) += omap-dss.o
-obj-$(CONFIG_VIDEO_OMAP_TVOUT) += omap-venc.o
+#obj-$(CONFIG_ARCH_OMAP3) += omap-dss.o
+#obj-$(CONFIG_VIDEO_OMAP_TVOUT) += omap-venc.o
 obj-$(CONFIG_CPU_FREQ) += cpu-omap.o
 obj-$(CONFIG_OMAP_DM_TIMER) += dmtimer.o
 obj-$(CONFIG_OMAP_BOOT_REASON) += bootreason.o
@@ -30,4 +30,4 @@ obj-$(CONFIG_OMAP_MMU_FWK) += mmu.o
 # OMAP mailbox framework
 obj-$(CONFIG_OMAP_MBOX_FWK) += mailbox.o
 
-obj-$(CONFIG_OMAP_PM_NOOP) += omap-pm-noop.o
\ No newline at end of file
+obj-$(CONFIG_OMAP_PM_NOOP) += omap-pm-noop.o
diff --git a/arch/arm/plat-omap/omap-dss.c b/arch/arm/plat-omap/omap-dss.c
index 1408d9f..31ff9b6 100644
--- a/arch/arm/plat-omap/omap-dss.c
+++ b/arch/arm/plat-omap/omap-dss.c
@@ -1755,7 +1755,6 @@ void omap_disp_get_all_clks(void)
 		/* restore dss context */
 		omap_disp_restore_ctx(OMAP_DSS_GENERIC);
 		omap_disp_restore_ctx(OMAP_DSS_DISPC_GENERIC);
-		omap_disp_restore_ctx(OMAP_GRAPHICS);
 		omap_disp_restore_ctx(OMAP_VIDEO1);
 		omap_disp_restore_ctx(OMAP_VIDEO2);
 
@@ -1921,7 +1920,6 @@ void omap_disp_get_dss(void)
 		/* restore dss context */
 		omap_disp_restore_ctx(OMAP_DSS_GENERIC);
 		omap_disp_restore_ctx(OMAP_DSS_DISPC_GENERIC);
-		omap_disp_restore_ctx(OMAP_GRAPHICS);
 		omap_disp_restore_ctx(OMAP_VIDEO1);
 		omap_disp_restore_ctx(OMAP_VIDEO2);
 
diff --git a/drivers/video/omap/dispc.c b/drivers/video/omap/dispc.c
index 6aff476..23621ca 100644
--- a/drivers/video/omap/dispc.c
+++ b/drivers/video/omap/dispc.c
@@ -27,105 +27,18 @@
 #include <asm/arch/sram.h>
 #include <asm/arch/omapfb.h>
 #include <asm/arch/board.h>
-
+#include <asm/arch/omap-dss.h>
 #include "dispc.h"
 
 #define MODULE_NAME			"dispc"
 
-#define DSS_BASE			0x48050000
-#define DSS_SYSCONFIG			0x0010
-
-#define DISPC_BASE			0x48050400
-
-/* DISPC common */
-#define DISPC_REVISION			0x0000
-#define DISPC_SYSCONFIG			0x0010
-#define DISPC_SYSSTATUS			0x0014
-#define DISPC_IRQSTATUS			0x0018
-#define DISPC_IRQENABLE			0x001C
-#define DISPC_CONTROL			0x0040
-#define DISPC_CONFIG			0x0044
-#define DISPC_CAPABLE			0x0048
-#define DISPC_DEFAULT_COLOR0		0x004C
-#define DISPC_DEFAULT_COLOR1		0x0050
-#define DISPC_TRANS_COLOR0		0x0054
-#define DISPC_TRANS_COLOR1		0x0058
-#define DISPC_LINE_STATUS		0x005C
-#define DISPC_LINE_NUMBER		0x0060
-#define DISPC_TIMING_H			0x0064
-#define DISPC_TIMING_V			0x0068
-#define DISPC_POL_FREQ			0x006C
-#define DISPC_DIVISOR			0x0070
-#define DISPC_SIZE_DIG			0x0078
-#define DISPC_SIZE_LCD			0x007C
-
-#define DISPC_DATA_CYCLE1		0x01D4
-#define DISPC_DATA_CYCLE2		0x01D8
-#define DISPC_DATA_CYCLE3		0x01DC
-
-/* DISPC GFX plane */
-#define DISPC_GFX_BA0			0x0080
-#define DISPC_GFX_BA1			0x0084
-#define DISPC_GFX_POSITION		0x0088
-#define DISPC_GFX_SIZE			0x008C
-#define DISPC_GFX_ATTRIBUTES		0x00A0
-#define DISPC_GFX_FIFO_THRESHOLD	0x00A4
-#define DISPC_GFX_FIFO_SIZE_STATUS	0x00A8
-#define DISPC_GFX_ROW_INC		0x00AC
-#define DISPC_GFX_PIXEL_INC		0x00B0
-#define DISPC_GFX_WINDOW_SKIP		0x00B4
-#define DISPC_GFX_TABLE_BA		0x00B8
-
-/* DISPC Video plane 1/2 */
-#define DISPC_VID1_BASE			0x00BC
-#define DISPC_VID2_BASE			0x014C
-
-/* Offsets into DISPC_VID1/2_BASE */
-#define DISPC_VID_BA0			0x0000
-#define DISPC_VID_BA1			0x0004
-#define DISPC_VID_POSITION		0x0008
-#define DISPC_VID_SIZE			0x000C
-#define DISPC_VID_ATTRIBUTES		0x0010
-#define DISPC_VID_FIFO_THRESHOLD	0x0014
-#define DISPC_VID_FIFO_SIZE_STATUS	0x0018
-#define DISPC_VID_ROW_INC		0x001C
-#define DISPC_VID_PIXEL_INC		0x0020
-#define DISPC_VID_FIR			0x0024
-#define DISPC_VID_PICTURE_SIZE		0x0028
-#define DISPC_VID_ACCU0			0x002C
-#define DISPC_VID_ACCU1			0x0030
-
-/* 8 elements in 8 byte increments */
-#define DISPC_VID_FIR_COEF_H0		0x0034
-/* 8 elements in 8 byte increments */
-#define DISPC_VID_FIR_COEF_HV0		0x0038
-/* 5 elements in 4 byte increments */
-#define DISPC_VID_CONV_COEF0		0x0074
-
-#define DISPC_IRQ_FRAMEMASK		0x0001
-#define DISPC_IRQ_VSYNC			0x0002
-#define DISPC_IRQ_EVSYNC_EVEN		0x0004
-#define DISPC_IRQ_EVSYNC_ODD		0x0008
-#define DISPC_IRQ_ACBIAS_COUNT_STAT	0x0010
-#define DISPC_IRQ_PROG_LINE_NUM		0x0020
-#define DISPC_IRQ_GFX_FIFO_UNDERFLOW	0x0040
-#define DISPC_IRQ_GFX_END_WIN		0x0080
-#define DISPC_IRQ_PAL_GAMMA_MASK	0x0100
-#define DISPC_IRQ_OCP_ERR		0x0200
-#define DISPC_IRQ_VID1_FIFO_UNDERFLOW	0x0400
-#define DISPC_IRQ_VID1_END_WIN		0x0800
-#define DISPC_IRQ_VID2_FIFO_UNDERFLOW	0x1000
-#define DISPC_IRQ_VID2_END_WIN		0x2000
-#define DISPC_IRQ_SYNC_LOST		0x4000
-
+#define DISPC_BASE			(DSS_REG_BASE + DISPC_REG_OFFSET)
 #define DISPC_IRQ_MASK_ALL		0x7fff
 
-#define DISPC_IRQ_MASK_ERROR		(DISPC_IRQ_GFX_FIFO_UNDERFLOW |	\
-					     DISPC_IRQ_VID1_FIFO_UNDERFLOW | \
-					     DISPC_IRQ_VID2_FIFO_UNDERFLOW | \
-					     DISPC_IRQ_SYNC_LOST)
-
-#define RFBI_CONTROL			0x48050040
+#define DISPC_IRQ_MASK_ERROR		(DISPC_IRQSTATUS_GFXFIFOUNDERFLOW |\
+					 DISPC_IRQSTATUS_VID2FIFOUNDERFLOW | \
+					 DISPC_IRQSTATUS_VID2FIFOUNDERFLOW | \
+					 DISPC_IRQSTATUS_SYNCLOST)
 
 #define MAX_PALETTE_SIZE		(256 * 16)
 
@@ -183,8 +96,6 @@ static struct {
 	struct omapfb_color_key	color_key;
 } dispc;
 
-static void enable_lcd_clocks(int enable);
-
 static void inline dispc_write_reg(int idx, u32 val)
 {
 	__raw_writel(val, dispc.base + idx);
@@ -211,9 +122,9 @@ static void enable_rfbi_mode(int enable)
 	dispc_write_reg(DISPC_CONTROL, l);
 
 	/* Set bypass mode in RFBI module */
-	l = __raw_readl(io_p2v(RFBI_CONTROL));
+	l = __raw_readl(io_p2v(DSS_REG_BASE + DSS_CONTROL));
 	l |= enable ? 0 : (1 << 1);
-	__raw_writel(l, io_p2v(RFBI_CONTROL));
+	__raw_writel(l, io_p2v(DSS_REG_BASE + DSS_CONTROL));
 }
 
 static void set_lcd_data_lines(int data_lines)
@@ -254,31 +165,31 @@ static void set_load_mode(int mode)
 void omap_dispc_set_lcd_size(int x, int y)
 {
 	BUG_ON((x > (1 << 11)) || (y > (1 << 11)));
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	MOD_REG_FLD(DISPC_SIZE_LCD, FLD_MASK(16, 11) | FLD_MASK(0, 11),
 			((y - 1) << 16) | (x - 1));
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 }
 EXPORT_SYMBOL(omap_dispc_set_lcd_size);
 
 void omap_dispc_set_digit_size(int x, int y)
 {
 	BUG_ON((x > (1 << 11)) || (y > (1 << 11)));
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	MOD_REG_FLD(DISPC_SIZE_DIG, FLD_MASK(16, 11) | FLD_MASK(0, 11),
 			((y - 1) << 16) | (x - 1));
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 }
 EXPORT_SYMBOL(omap_dispc_set_digit_size);
 
 static void setup_plane_fifo(int plane, int ext_mode)
 {
 	const u32 ftrs_reg[] = { DISPC_GFX_FIFO_THRESHOLD,
-				DISPC_VID1_BASE + DISPC_VID_FIFO_THRESHOLD,
-			        DISPC_VID2_BASE + DISPC_VID_FIFO_THRESHOLD };
-	const u32 fsz_reg[] = { DISPC_GFX_FIFO_SIZE_STATUS,
-				DISPC_VID1_BASE + DISPC_VID_FIFO_SIZE_STATUS,
-				DISPC_VID2_BASE + DISPC_VID_FIFO_SIZE_STATUS };
+				DISPC_VID_FIFO_THRESHOLD(0),
+				DISPC_VID_FIFO_THRESHOLD(1) };
+	const u32 fsz_reg[] = { DISPC_GFX_FIFO_SIZE,
+				DISPC_VID_FIFO_SIZE(0),
+				DISPC_VID_FIFO_SIZE(1) };
 	int low, high;
 	u32 l;
 
@@ -299,17 +210,17 @@ static void setup_plane_fifo(int plane, int ext_mode)
 
 void omap_dispc_enable_lcd_out(int enable)
 {
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	MOD_REG_FLD(DISPC_CONTROL, 1, enable ? 1 : 0);
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 }
 EXPORT_SYMBOL(omap_dispc_enable_lcd_out);
 
 void omap_dispc_enable_digit_out(int enable)
 {
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	MOD_REG_FLD(DISPC_CONTROL, 1 << 1, enable ? 1 << 1 : 0);
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 }
 EXPORT_SYMBOL(omap_dispc_enable_digit_out);
 
@@ -319,21 +230,21 @@ static inline int _setup_plane(int plane, int channel_out,
 				  int color_mode)
 {
 	const u32 at_reg[] = { DISPC_GFX_ATTRIBUTES,
-				DISPC_VID1_BASE + DISPC_VID_ATTRIBUTES,
-			        DISPC_VID2_BASE + DISPC_VID_ATTRIBUTES };
-	const u32 ba_reg[] = { DISPC_GFX_BA0, DISPC_VID1_BASE + DISPC_VID_BA0,
-				DISPC_VID2_BASE + DISPC_VID_BA0 };
+				DISPC_VID_ATTRIBUTES(0),
+				DISPC_VID_ATTRIBUTES(1) };
+	const u32 ba_reg[] = { DISPC_GFX_BA0, DISPC_VID_BA0(0),
+				DISPC_VID_BA0(1) };
 	const u32 ps_reg[] = { DISPC_GFX_POSITION,
-				DISPC_VID1_BASE + DISPC_VID_POSITION,
-				DISPC_VID2_BASE + DISPC_VID_POSITION };
+				DISPC_VID_POSITION(0),
+				DISPC_VID_POSITION(1) };
 	const u32 sz_reg[] = { DISPC_GFX_SIZE,
-				DISPC_VID1_BASE + DISPC_VID_PICTURE_SIZE,
-				DISPC_VID2_BASE + DISPC_VID_PICTURE_SIZE };
+				DISPC_VID_PICTURE_SIZE(0),
+				DISPC_VID_PICTURE_SIZE(1) };
 	const u32 ri_reg[] = { DISPC_GFX_ROW_INC,
-				DISPC_VID1_BASE + DISPC_VID_ROW_INC,
-			        DISPC_VID2_BASE + DISPC_VID_ROW_INC };
-	const u32 vs_reg[] = { 0, DISPC_VID1_BASE + DISPC_VID_SIZE,
-				DISPC_VID2_BASE + DISPC_VID_SIZE };
+				DISPC_VID_ROW_INC(0),
+				DISPC_VID_ROW_INC(1) };
+	const u32 vs_reg[] = { 0, DISPC_VID_SIZE(0),
+				DISPC_VID_SIZE(1) };
 
 	int chout_shift, burst_shift;
 	int chout_val;
@@ -450,11 +361,11 @@ static int omap_dispc_setup_plane(int plane, int channel_out,
 	if ((unsigned)plane > dispc.mem_desc.region_cnt)
 		return -EINVAL;
 	paddr = dispc.mem_desc.region[plane].paddr + offset;
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	r = _setup_plane(plane, channel_out, paddr,
 			screen_width,
 			pos_x, pos_y, width, height, color_mode);
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 	return r;
 }
 
@@ -463,10 +374,10 @@ static void write_firh_reg(int plane, int reg, u32 value)
 	u32 base;
 
 	if (plane == 1)
-		base = DISPC_VID1_BASE + DISPC_VID_FIR_COEF_H0;
+		base = DISPC_VID_FIR_COEF_H(0, reg);
 	else
-		base = DISPC_VID2_BASE + DISPC_VID_FIR_COEF_H0;
-	dispc_write_reg(base + reg * 8,	value);
+		base = DISPC_VID_FIR_COEF_H(1, reg);
+	dispc_write_reg(base, value);
 }
 
 static void write_firhv_reg(int plane, int reg, u32 value)
@@ -474,10 +385,10 @@ static void write_firhv_reg(int plane, int reg, u32 value)
 	u32 base;
 
 	if (plane == 1)
-		base = DISPC_VID1_BASE + DISPC_VID_FIR_COEF_HV0;
+		base = DISPC_VID_FIR_COEF_HV(0, reg);
 	else
-		base = DISPC_VID2_BASE + DISPC_VID_FIR_COEF_HV0;
-	dispc_write_reg(base + reg * 8,	value);
+		base = DISPC_VID_FIR_COEF_HV(1, reg);
+	dispc_write_reg(base, value);
 }
 
 static void set_upsampling_coef_table(int plane)
@@ -504,12 +415,12 @@ static int omap_dispc_set_scale(int plane,
 				int orig_width, int orig_height,
 				int out_width, int out_height)
 {
-	const u32 at_reg[]  = { 0, DISPC_VID1_BASE + DISPC_VID_ATTRIBUTES,
-				DISPC_VID2_BASE + DISPC_VID_ATTRIBUTES };
-	const u32 vs_reg[]  = { 0, DISPC_VID1_BASE + DISPC_VID_SIZE,
-				DISPC_VID2_BASE + DISPC_VID_SIZE };
-	const u32 fir_reg[] = { 0, DISPC_VID1_BASE + DISPC_VID_FIR,
-				DISPC_VID2_BASE + DISPC_VID_FIR };
+	const u32 at_reg[]  = { 0, DISPC_VID_ATTRIBUTES(0),
+				DISPC_VID_ATTRIBUTES(1) };
+	const u32 vs_reg[]  = { 0, DISPC_VID_SIZE(0),
+				DISPC_VID_SIZE(1) };
+	const u32 fir_reg[] = { 0, DISPC_VID_FIR(0),
+				DISPC_VID_FIR(1) };
 
 	u32 l;
 	int fir_hinc;
@@ -522,7 +433,7 @@ static int omap_dispc_set_scale(int plane,
 	    (out_width != orig_width || out_height != orig_height))
 		return -EINVAL;
 
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	if (orig_width < out_width) {
 		/*
 		 * Upsampling.
@@ -531,7 +442,7 @@ static int omap_dispc_set_scale(int plane,
 		if (orig_height > out_height ||
 		    orig_width * 8 < out_width ||
 		    orig_height * 8 < out_height) {
-			enable_lcd_clocks(0);
+			omap_disp_put_dss();
 			return -EINVAL;
 		}
 		set_upsampling_coef_table(plane);
@@ -539,7 +450,7 @@ static int omap_dispc_set_scale(int plane,
 		/* Downsampling not yet supported
 		*/
 
-		enable_lcd_clocks(0);
+		omap_disp_put_dss();
 		return -EINVAL;
 	}
 	if (!orig_width || orig_width == out_width)
@@ -573,21 +484,21 @@ static int omap_dispc_set_scale(int plane,
 	l |= fir_vinc ? (1 << 6) : 0;
 	dispc_write_reg(at_reg[plane], l);
 
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 	return 0;
 }
 
 static int omap_dispc_enable_plane(int plane, int enable)
 {
 	const u32 at_reg[] = { DISPC_GFX_ATTRIBUTES,
-				DISPC_VID1_BASE + DISPC_VID_ATTRIBUTES,
-				DISPC_VID2_BASE + DISPC_VID_ATTRIBUTES };
+				DISPC_VID_ATTRIBUTES(0),
+				DISPC_VID_ATTRIBUTES(1) };
 	if ((unsigned int)plane > dispc.mem_desc.region_cnt)
 		return -EINVAL;
 
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	MOD_REG_FLD(at_reg[plane], 1, enable ? 1 : 0);
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 
 	return 0;
 }
@@ -624,13 +535,13 @@ static int omap_dispc_set_color_key(struct omapfb_color_key *ck)
 	default:
 		return -EINVAL;
 	}
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	MOD_REG_FLD(DISPC_CONFIG, FLD_MASK(shift, 2), val << shift);
 
 	if (val != 0)
 		dispc_write_reg(tr_reg, ck->trans_key);
 	dispc_write_reg(df_reg, ck->background);
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 
 	dispc.color_key = *ck;
 
@@ -655,7 +566,7 @@ static int omap_dispc_set_update_mode(enum omapfb_update_mode mode)
 		switch (mode) {
 		case OMAPFB_AUTO_UPDATE:
 		case OMAPFB_MANUAL_UPDATE:
-			enable_lcd_clocks(1);
+			omap_disp_get_dss();
 			omap_dispc_enable_lcd_out(1);
 			dispc.update_mode = mode;
 			break;
@@ -668,7 +579,7 @@ static int omap_dispc_set_update_mode(enum omapfb_update_mode mode)
 					 "timeout waiting for FRAME DONE\n");
 			}
 			dispc.update_mode = mode;
-			enable_lcd_clocks(0);
+			omap_disp_put_dss();
 			break;
 		default:
 			r = -EINVAL;
@@ -702,10 +613,10 @@ static enum omapfb_update_mode omap_dispc_get_update_mode(void)
 static void setup_color_conv_coef(void)
 {
 	u32 mask = FLD_MASK(16, 11) | FLD_MASK(0, 11);
-	int cf1_reg = DISPC_VID1_BASE + DISPC_VID_CONV_COEF0;
-	int cf2_reg = DISPC_VID2_BASE + DISPC_VID_CONV_COEF0;
-	int at1_reg = DISPC_VID1_BASE + DISPC_VID_ATTRIBUTES;
-	int at2_reg = DISPC_VID2_BASE + DISPC_VID_ATTRIBUTES;
+	int cf1_reg = DISPC_VID_CONV_COEF0(0);
+	int cf2_reg = DISPC_VID_CONV_COEF0(1);
+	int at1_reg = DISPC_VID_ATTRIBUTES(0);
+	int at2_reg = DISPC_VID_ATTRIBUTES(1);
 	const struct color_conv_coef {
 		int  ry,  rcr,  rcb,   gy,  gcr,  gcb,   by,  bcr,  bcb;
 		int  full_range;
@@ -827,31 +738,31 @@ EXPORT_SYMBOL(omap_dispc_request_irq);
 
 void omap_dispc_enable_irqs(int irq_mask)
 {
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	dispc.enabled_irqs = irq_mask;
 	irq_mask |= DISPC_IRQ_MASK_ERROR;
 	MOD_REG_FLD(DISPC_IRQENABLE, 0x7fff, irq_mask);
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 }
 EXPORT_SYMBOL(omap_dispc_enable_irqs);
 
 void omap_dispc_disable_irqs(int irq_mask)
 {
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	dispc.enabled_irqs &= ~irq_mask;
 	irq_mask &= ~DISPC_IRQ_MASK_ERROR;
 	MOD_REG_FLD(DISPC_IRQENABLE, 0x7fff, irq_mask);
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 }
 EXPORT_SYMBOL(omap_dispc_disable_irqs);
 
 void omap_dispc_free_irq(void)
 {
-	enable_lcd_clocks(1);
+	omap_disp_get_dss();
 	omap_dispc_disable_irqs(DISPC_IRQ_MASK_ALL);
 	dispc.irq_callback = NULL;
 	dispc.irq_callback_data = NULL;
-	enable_lcd_clocks(0);
+	omap_disp_put_dss();
 }
 EXPORT_SYMBOL(omap_dispc_free_irq);
 
@@ -859,7 +770,7 @@ static irqreturn_t omap_dispc_irq_handler(int irq, void *dev)
 {
 	u32 stat = dispc_read_reg(DISPC_IRQSTATUS);
 
-	if (stat & DISPC_IRQ_FRAMEMASK)
+	if (stat & DISPC_IRQSTATUS_FRAMEDONE)
 		complete(&dispc.frame_done);
 
 	if (stat & DISPC_IRQ_MASK_ERROR) {
@@ -877,65 +788,6 @@ static irqreturn_t omap_dispc_irq_handler(int irq, void *dev)
 	return IRQ_HANDLED;
 }
 
-static int get_dss_clocks(void)
-{
-	char *dss_ick = "dss_ick";
-	char *dss1_fck = cpu_is_omap34xx() ? "dss1_alwon_fck" : "dss1_fck";
-	char *tv_fck = cpu_is_omap34xx() ? "dss_tv_fck" : "dss_54m_fck";
-
-	if (IS_ERR((dispc.dss_ick = clk_get(dispc.fbdev->dev, dss_ick)))) {
-		dev_err(dispc.fbdev->dev, "can't get %s", dss_ick);
-		return PTR_ERR(dispc.dss_ick);
-	}
-
-	if (IS_ERR((dispc.dss1_fck = clk_get(dispc.fbdev->dev, dss1_fck)))) {
-		dev_err(dispc.fbdev->dev, "can't get %s", dss1_fck);
-		clk_put(dispc.dss_ick);
-		return PTR_ERR(dispc.dss1_fck);
-	}
-
-	if (IS_ERR((dispc.dss_54m_fck =
-				clk_get(dispc.fbdev->dev, tv_fck)))) {
-		dev_err(dispc.fbdev->dev, "can't get %s", tv_fck);
-		clk_put(dispc.dss_ick);
-		clk_put(dispc.dss1_fck);
-		return PTR_ERR(dispc.dss_54m_fck);
-	}
-
-	return 0;
-}
-
-static void put_dss_clocks(void)
-{
-	clk_put(dispc.dss_54m_fck);
-	clk_put(dispc.dss1_fck);
-	clk_put(dispc.dss_ick);
-}
-
-static void enable_lcd_clocks(int enable)
-{
-	if (enable)
-		clk_enable(dispc.dss1_fck);
-	else
-		clk_disable(dispc.dss1_fck);
-}
-
-static void enable_interface_clocks(int enable)
-{
-	if (enable)
-		clk_enable(dispc.dss_ick);
-	else
-		clk_disable(dispc.dss_ick);
-}
-
-static void enable_digit_clocks(int enable)
-{
-	if (enable)
-		clk_enable(dispc.dss_54m_fck);
-	else
-		clk_disable(dispc.dss_54m_fck);
-}
-
 static void omap_dispc_suspend(void)
 {
 	if (dispc.update_mode == OMAPFB_AUTO_UPDATE) {
@@ -946,14 +798,14 @@ static void omap_dispc_suspend(void)
 			dev_err(dispc.fbdev->dev,
 				"timeout waiting for FRAME DONE\n");
 		}
-		enable_lcd_clocks(0);
+		omap_disp_put_dss();
 	}
 }
 
 static void omap_dispc_resume(void)
 {
 	if (dispc.update_mode == OMAPFB_AUTO_UPDATE) {
-		enable_lcd_clocks(1);
+		omap_disp_get_dss();
 		if (!dispc.ext_mode) {
 			set_lcd_timings();
 			load_palette();
@@ -962,7 +814,6 @@ static void omap_dispc_resume(void)
 	}
 }
 
-
 static int omap_dispc_update_window(struct fb_info *fbi,
 				 struct omapfb_update_window *win,
 				 void (*complete_callback)(void *arg),
@@ -1343,7 +1194,7 @@ static void cleanup_fbmem(void)
 static int omap_dispc_init(struct omapfb_device *fbdev, int ext_mode,
 			   struct omapfb_mem_desc *req_vram)
 {
-	int r;
+	int r = 0;
 	u32 l;
 	struct lcd_panel *panel = fbdev->panel;
 	int tmo = 10000;
@@ -1357,26 +1208,22 @@ static int omap_dispc_init(struct omapfb_device *fbdev, int ext_mode,
 	dispc.ext_mode = ext_mode;
 
 	init_completion(&dispc.frame_done);
+	omap_disp_get_dss();
+	dispc.dss_ick = clk_get(fbdev->dev, "dss_ick");
+	dispc.dss1_fck = clk_get(fbdev->dev, cpu_is_omap34xx() ?
+					"dss1_alwon_fck" : "dss1_fck");
+	dispc.dss_54m_fck = clk_get(fbdev->dev, cpu_is_omap34xx() ?
+					"dss_tv_fck" : "dss_54m_fck");
 
-	if ((r = get_dss_clocks()) < 0)
-		return r;
-
-	enable_interface_clocks(1);
-	enable_lcd_clocks(1);
-
-#ifdef CONFIG_FB_OMAP_BOOTLOADER_INIT
 	l = dispc_read_reg(DISPC_CONTROL);
 	/* LCD enabled ? */
-	if (l & 1) {
+	if ((l & 1) || (l & 0x2)) {
 		pr_info("omapfb: skipping hardware initialization\n");
 		skip_init = 1;
 	}
-#endif
 
 	if (!skip_init) {
 		/* Reset monitoring works only w/ the 54M clk */
-		enable_digit_clocks(1);
-
 		/* Soft reset */
 		MOD_REG_FLD(DISPC_SYSCONFIG, 1 << 1, 1 << 1);
 
@@ -1384,12 +1231,9 @@ static int omap_dispc_init(struct omapfb_device *fbdev, int ext_mode,
 			if (!--tmo) {
 				dev_err(dispc.fbdev->dev, "soft reset failed\n");
 				r = -ENODEV;
-				enable_digit_clocks(0);
 				goto fail1;
 			}
 		}
-
-		enable_digit_clocks(0);
 	}
 
 	/* Enable smart idle and autoidle */
@@ -1397,7 +1241,6 @@ static int omap_dispc_init(struct omapfb_device *fbdev, int ext_mode,
 	l &= ~((3 << 12) | (3 << 3));
 	l |= (2 << 12) | (2 << 3) | (1 << 0);
 	dispc_write_reg(DISPC_SYSCONFIG, l);
-	omap_writel(1 << 0, DSS_BASE + DSS_SYSCONFIG);
 
 	/* Set functional clock autogating */
 	l = dispc_read_reg(DISPC_CONFIG);
@@ -1408,10 +1251,9 @@ static int omap_dispc_init(struct omapfb_device *fbdev, int ext_mode,
 	dispc_write_reg(DISPC_IRQSTATUS, l);
 
 	/* Enable those that we handle always */
-	omap_dispc_enable_irqs(DISPC_IRQ_FRAMEMASK);
-
-	if ((r = request_irq(INT_24XX_DSS_IRQ, omap_dispc_irq_handler,
-			   0, MODULE_NAME, fbdev)) < 0) {
+	if (omap_disp_register_isr((omap_disp_isr_t)omap_dispc_irq_handler,
+					fbdev, DISPC_IRQENABLE_FRAMEDONE |
+					DISPC_IRQSTATUS_GFXFIFOUNDERFLOW)) {
 		dev_err(dispc.fbdev->dev, "can't get DSS IRQ\n");
 		goto fail1;
 	}
@@ -1425,7 +1267,6 @@ static int omap_dispc_init(struct omapfb_device *fbdev, int ext_mode,
 	if ((r = setup_fbmem(req_vram)) < 0)
 		goto fail3;
 
-	if (!skip_init) {
 		for (i = 0; i < dispc.mem_desc.region_cnt; i++) {
 			memset(dispc.mem_desc.region[i].vaddr, 0,
 				dispc.mem_desc.region[i].size);
@@ -1436,11 +1277,6 @@ static int omap_dispc_init(struct omapfb_device *fbdev, int ext_mode,
 		MOD_REG_FLD(DISPC_DIVISOR, FLD_MASK(0, 8), 2 << 0);
 
 		setup_plane_fifo(0, ext_mode);
-		setup_plane_fifo(1, ext_mode);
-		setup_plane_fifo(2, ext_mode);
-
-		setup_color_conv_coef();
-
 		set_lcd_tft_mode(panel->config & OMAP_LCDC_PANEL_TFT);
 		set_load_mode(DISPC_LOAD_FRAME_ONLY);
 
@@ -1451,23 +1287,18 @@ static int omap_dispc_init(struct omapfb_device *fbdev, int ext_mode,
 		} else
 			set_lcd_data_lines(panel->bpp);
 		enable_rfbi_mode(ext_mode);
-	}
 
 	l = dispc_read_reg(DISPC_REVISION);
 	pr_info("omapfb: DISPC version %d.%d initialized\n",
 		 l >> 4 & 0x0f, l & 0x0f);
-	enable_lcd_clocks(0);
 
-	return 0;
+	return r;
 fail3:
 	free_palette_ram();
 fail2:
 	free_irq(INT_24XX_DSS_IRQ, fbdev);
 fail1:
-	enable_lcd_clocks(0);
-	enable_interface_clocks(0);
-	put_dss_clocks();
-
+	omap_disp_put_dss();
 	return r;
 }
 
@@ -1482,8 +1313,7 @@ static void omap_dispc_cleanup(void)
 	cleanup_fbmem();
 	free_palette_ram();
 	free_irq(INT_24XX_DSS_IRQ, dispc.fbdev);
-	enable_interface_clocks(0);
-	put_dss_clocks();
+	omap_disp_put_dss();
 }
 
 const struct lcd_ctrl omap2_int_ctrl = {
-- 
1.5.6

