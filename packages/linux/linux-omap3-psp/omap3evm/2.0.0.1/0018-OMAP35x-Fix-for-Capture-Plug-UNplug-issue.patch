From ab6a76c6ab302840d971c9eab17318d269f6bd02 Mon Sep 17 00:00:00 2001
From: Sriram <srk@ti.com>
Date: Mon, 15 Sep 2008 15:18:46 +0530
Subject: [PATCH 18/24] OMAP35x : Fix for Capture Plug/UNplug issue.

---
 drivers/media/video/isp/isp.c     |   67 ++++++++++++++++++++++++++----------
 drivers/media/video/isp/ispccdc.c |    4 +-
 drivers/media/video/omap34xxcam.c |   10 ++++-
 3 files changed, 58 insertions(+), 23 deletions(-)

diff --git a/drivers/media/video/isp/isp.c b/drivers/media/video/isp/isp.c
index 6b8eea7..92f7a6d 100644
--- a/drivers/media/video/isp/isp.c
+++ b/drivers/media/video/isp/isp.c
@@ -189,6 +189,7 @@ struct isp_sgdma ispsg;
  * @mode: Interlaced or progressive capture.
  * @current_field: Current field for interlaced capture.
  * @input_pixelformat: Pixel format of decoder/sensor.
+ * @prev_irq: Stores the previous interrupt - HS_VS, CCDC_VD0 or CCDC_VD1.
  */
 struct ispmodule {
 	unsigned int isp_pipeline;
@@ -210,6 +211,7 @@ struct ispmodule {
 	enum capture_mode mode;
 	int current_field;
 	__u32 input_pixelformat;
+	enum isp_irqevents prev_irq;
 };
 
 /**
@@ -285,6 +287,7 @@ static struct ispmodule ispmodule_obj = {
 	.mode = MODE_PROGRESSIVE,
 	.current_field = 0,
 	.input_pixelformat = V4L2_PIX_FMT_UYVY,
+	.prev_irq = HS_VS,
 };
 
 /* Structure for saving/restoring ISP module registers */
@@ -1393,18 +1396,13 @@ void isp_vbq_done(unsigned long status, isp_vbq_callback_ptr arg1, void *arg2)
 	case CCDC_VD0:
 		if (ispmodule_obj.mode == MODE_INTERLACED) {
 			spin_lock(&isp_obj.isp_temp_buf_lock);
-			if (ispmodule_obj.current_field != fld_stat) {
-				if (fld_stat == 0)
-					ispmodule_obj.current_field = fld_stat;
-
+			/* Skip even fields */
+			if (ispmodule_obj.current_field == 0) {
 				spin_unlock(&isp_obj.isp_temp_buf_lock);
 				return;
 			}
+			ispmodule_obj.prev_irq = CCDC_VD0;
 			spin_unlock(&isp_obj.isp_temp_buf_lock);
-
-			if (fld_stat == 0) {	/* Skip even fields */
-				return;
-			}
 		}
 
 		ispccdc_config_shadow_registers();
@@ -1426,18 +1424,12 @@ void isp_vbq_done(unsigned long status, isp_vbq_callback_ptr arg1, void *arg2)
 	case CCDC_VD1:
 		if (ispmodule_obj.mode == MODE_INTERLACED) {
 			spin_lock(&isp_obj.isp_temp_buf_lock);
-			if (ispmodule_obj.current_field != fld_stat) {
-				if (fld_stat == 0)
-					ispmodule_obj.current_field = fld_stat;
-
+			/* Skip even fields */
+			if (ispmodule_obj.current_field == 0) {
 				spin_unlock(&isp_obj.isp_temp_buf_lock);
 				return;
 			}
-
-			if (fld_stat == 0) {	/* Skip even fields */
-				return;
-			}
-
+			ispmodule_obj.prev_irq = CCDC_VD1;
 			spin_unlock(&isp_obj.isp_temp_buf_lock);
 		}
 
@@ -1486,10 +1478,47 @@ void isp_vbq_done(unsigned long status, isp_vbq_callback_ptr arg1, void *arg2)
 		break;
 	case HS_VS:
 		if (ispmodule_obj.mode == MODE_INTERLACED) {
-			ispmodule_obj.current_field ^= 1;
 			spin_lock(&isp_obj.isp_temp_buf_lock);
+			if (ispmodule_obj.prev_irq == CCDC_VD1) {
+				/*
+				 * VD0 interrupt is missed but VD1 interrupt
+				 * is processed because of plug-in/plug-out
+				 * of cable. Handle this condition gracefully
+				 * by running the code as if VD0 has occurred.
+				 * In normal condition, interrupts will occur
+				 * in the following order:
+				 * HS_VS of fld 0 (ignored)
+				 * CCDC_VD1 (at line 50) of fld 0 (ignored)
+				 * CCDC_VD0 (at last line) of fld 0 (ignored)
+				 * HS_VS of fld 1 (processed)
+				 * CCDC_VD1 (at line 50) of fld 1 (processed)
+				 * CCDC_VD0 (at last line) of fld 1 (processed)
+				 */
+				if (ispmodule_obj.isp_temp_state
+						== ISP_BUF_INIT) {
+					spin_unlock(
+						&isp_obj.isp_temp_buf_lock);
+					spin_lock_irqsave(&ispsg.lock,
+								flags);
+					ispsg.free_sgdma++;
+					if (ispsg.free_sgdma > NUM_SG_DMA)
+						ispsg.free_sgdma = NUM_SG_DMA;
+					spin_unlock_irqrestore(&ispsg.lock,
+									flags);
+
+					rval = arg1(vb);
+
+					if (rval)
+						isp_sgdma_process(&ispsg, 1,
+								&notify, arg1);
+
+					spin_lock(&isp_obj.isp_temp_buf_lock);
+				}
+			}
+			ispmodule_obj.prev_irq = HS_VS;
+			ispmodule_obj.current_field ^= 1;
 			if ((ispmodule_obj.isp_temp_state == ISP_BUF_TRAN) &&
-			    (fld_stat == 1)) {
+					(fld_stat == 1)) {
 				isp_CCDC_VD01_enable();
 				ispmodule_obj.current_field = fld_stat;
 				ispmodule_obj.isp_temp_state = ISP_BUF_INIT;
diff --git a/drivers/media/video/isp/ispccdc.c b/drivers/media/video/isp/ispccdc.c
index 2986251..7d575b4 100644
--- a/drivers/media/video/isp/ispccdc.c
+++ b/drivers/media/video/isp/ispccdc.c
@@ -1253,10 +1253,10 @@ int ispccdc_config_size(u32 input_w, u32 input_h, u32 output_w, u32 output_h)
 							ODDODD,
 							1);
 
-			omap_writel((((0) &
+			omap_writel(((((ispccdc_obj.ccdcout_h >> 1) - 1) &
 					ISPCCDC_VDINT_0_MASK) <<
 					ISPCCDC_VDINT_0_SHIFT) |
-					((0 & ISPCCDC_VDINT_1_MASK) <<
+					((50 & ISPCCDC_VDINT_1_MASK) <<
 					ISPCCDC_VDINT_1_SHIFT), ISPCCDC_VDINT);
 		}
 	} else if (ispccdc_obj.ccdc_outfmt == CCDC_OTHERS_VP_MEM) {
diff --git a/drivers/media/video/omap34xxcam.c b/drivers/media/video/omap34xxcam.c
index 27cf98c..e88a755 100644
--- a/drivers/media/video/omap34xxcam.c
+++ b/drivers/media/video/omap34xxcam.c
@@ -1708,7 +1708,10 @@ static int omap34xxcam_probe(struct platform_device *pdev)
 	isp_sysconfig.reset = 0;
 	isp_sysconfig.idle_mode = 1;
 	isp_power_settings(isp_sysconfig);
-	isp_put();
+	/*
+	 * TODO: This is workaround for clk_enable crash, need to address
+	 */
+/*	isp_put();*/
 
 	for (i = 0; i < OMAP34XXCAM_VIDEODEVS; i++) {
 		struct omap34xxcam_videodev *vdev = &cam->vdevs[i];
@@ -1774,7 +1777,10 @@ static int omap34xxcam_remove(struct platform_device *pdev)
 		release_mem_region(cam->mmio_base_phys, cam->mmio_size);
 		cam->mmio_base_phys = 0;
 	}
-
+	/*
+	 * TODO: This is workaround for clk_enable crash, need to address
+	 */
+	isp_put();
 	kfree(cam);
 
 	return 0;
-- 
1.5.6

